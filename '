package main 
import ( "fmt"
	"net"
	"os"
  "strings"
)


var inputMap map[string][]string

func initTcp() (net.Listener) {
	l, err := net.Listen("tcp", "0.0.0.0:6379")
	if err != nil {
	  fmt.Println("Failed to bind to port 6379")
    os.Exit(1)
	}
  
  return l
}

func getClientConnection(l net.Listener) (net.Conn) {
  conn, err := l.Accept()
	if err != nil {
	  fmt.Println("Error accepting connection: ", err.Error())
    os.Exit(1)
	}

  return conn
}

func inputParser(data []byte) (string) {
  var pong = string("+PONG\r\n")

  pingSubstr := string("ping")
  echoSubstr := string("echo")
  setSubstr := string("set")
  getSubstr := string("get")
  
  del := string("\r\n")
  dataStr := string(data)
  dataArr := strings.Split(dataStr, del)
  
  fmt.Println(dataArr)
  for i, str := range(dataArr) {
    if strings.Contains(strings.ToLower(str), pingSubstr) {
      return pong

    } else if strings.Contains(strings.ToLower(str), echoSubstr) {
      return string("+" + dataArr[i+2] + del)
    
    } else if strings.Contains(strings.ToLower(str), setSubstr) {
      key := dataArr[i+2]
      val := dataArr[i+3:]
      fmt.Println(val)
      inputMap[key] = val
      return string("+OK\r\n")
    
    } else if strings.Contains(strings.ToLower(str), getSubstr) {
      key := dataArr[i+2]
      val := inputMap[key]
      
      fmt.Println(strings.Join(val, del))
      return strings.Join(val, del)
    }
  }

  return string("")
}

func connectionEcho(conn net.Conn) {
  for {
    buf := make([]byte, 1024)

    _, err := conn.Read(buf)
    if err!= nil {
      fmt.Println("Error reading:", err)
      return
    }

    res := inputParser(buf)
    conn.Write(res)
  }
}

func handleConnection(l net.Listener) {
  for {
    conn := getClientConnection(l)
    go connectionEcho(conn)
  }
}

func main() {
	// You can use print statements as follows for debugging, they'll be visible when running tests.
	fmt.Println("Logs from your program will appear here!")
  inputMap = make(map[string][]string)

  l := initTcp()
  handleConnection(l)
}
